diff --git a/testcases/hardlink_fails.sh b/testcases/hardlink_fails.sh
index 516efd2..2f19e32 100755
--- a/testcases/hardlink_fails.sh
+++ b/testcases/hardlink_fails.sh
@@ -30,30 +30,34 @@ for n in $files ; do
 done
 dbgecho passed the happy path
 
-#now try to make a hardlink to somewhere that fails.
-#ideally, we want to partitions so it is not possible to hardlink,
-#but it is difficult to fix that unless the test environment
-#is setup that way. therefore, make the hardlinking fail by
-#trying to hardlink something we do not have access to.
-#unless run as root which would be horrible.
-if [ "$(id -u)" -eq 0 ]; then
-   dbgecho "running as root or through sudo, dangerous! Will not proceed with this unit tests."
-   exit 1
-fi
-
-reset_teststate
-system_file=$(which ls)
-cp $system_file .
-$rdfind -makehardlinks true . $system_file 2>&1 |tee rdfind.out
-if ! grep -iq "failed" rdfind.out ; then
-   dbgecho "expected failure when trying to make hardlink on system partition"
-   exit 1
-fi
-
-#make sure that our own copy is still there
-if [ ! -e $(basename $system_file) ] ; then
-   dbgecho file is missing, rdfind should not have removed it!
-   exit 1
-fi
+# CYGWIN: Don't run this test: the user very likely has write access to
+# /bin/ls, so this test will fail and not actually give any useful information.
+if ! :; then
+   #now try to make a hardlink to somewhere that fails.
+   #ideally, we want to partitions so it is not possible to hardlink,
+   #but it is difficult to fix that unless the test environment
+   #is setup that way. therefore, make the hardlinking fail by
+   #trying to hardlink something we do not have access to.
+   #unless run as root which would be horrible.
+   if [ "$(id -u)" -eq 0 ]; then
+      dbgecho "running as root or through sudo, dangerous! Will not proceed with this unit tests."
+      exit 1
+   fi
+
+   reset_teststate
+   system_file=$(which ls)
+   cp $system_file .
+   $rdfind -makehardlinks true . $system_file 2>&1 |tee rdfind.out
+   if ! grep -iq "failed" rdfind.out ; then
+      dbgecho "expected failure when trying to make hardlink on system partition"
+      exit 1
+   fi
+
+   #make sure that our own copy is still there
+   if [ ! -e $(basename $system_file) ] ; then
+      dbgecho file is missing, rdfind should not have removed it!
+      exit 1
+   fi
+fi
 
 dbgecho "all is good in this test!"
diff --git a/testcases/symlinking_action.sh b/testcases/symlinking_action.sh
index 4a802bf..b43c7da 100755
--- a/testcases/symlinking_action.sh
+++ b/testcases/symlinking_action.sh
@@ -44,28 +44,31 @@ for n in $files ; do
 done
 dbgecho passed the happy path
 
-#now try to make a symlink somewhere where it fails.
-if [ "$(id -u)" -eq 0 ]; then
-   dbgecho "running as root or through sudo, dangerous! Will not proceed with this unit tests."
-   exit 1
-fi
-
-reset_teststate
-system_file=$(which ls)
-cp $system_file .
-$rdfind -makesymlinks true . $system_file 2>&1 |tee rdfind.out
-if ! grep -iq "failed to make symlink" rdfind.out ; then
-   dbgecho "did not get the expected error message. see for yourself above."
-   exit 1
-fi
-
-#make sure that our own copy is still there
-if [ ! -e $(basename $system_file) ] ; then
-   dbgecho file is missing, rdfind should not have removed it!
-   exit 1
-fi
-dbgecho passed the test with trying to write to a system directory
-
+# CYGWIN: Don't run this test: the user very likely has write access to
+# /bin/ls, so this test will fail and not actually give any useful information.
+if ! :; then
+   #now try to make a symlink somewhere where it fails.
+   if [ "$(id -u)" -eq 0 ]; then
+      dbgecho "running as root or through sudo, dangerous! Will not proceed with this unit tests."
+      exit 1
+   fi
+
+   reset_teststate
+   system_file=$(which ls)
+   cp $system_file .
+   $rdfind -makesymlinks true . $system_file 2>&1 |tee rdfind.out
+   if ! grep -iq "failed to make symlink" rdfind.out ; then
+      dbgecho "did not get the expected error message. see for yourself above."
+      exit 1
+   fi
+
+   #make sure that our own copy is still there
+   if [ ! -e $(basename $system_file) ] ; then
+      dbgecho file is missing, rdfind should not have removed it!
+      exit 1
+   fi
+   dbgecho passed the test with trying to write to a system directory
+fi
 
 
 #This test tries to provoke errors in relative paths, path simplification
